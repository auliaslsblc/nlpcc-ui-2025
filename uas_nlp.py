# -*- coding: utf-8 -*-
"""UAS NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VIYiiUJ7coj7mGp9cx-j0tFfLLXLRfqQ

# **"Insightify AI" **- Automated Product/Service Review Analysis Assistant
Problem: Businesses often struggle to sift through and make sense of the large volume of customer reviews from various platforms (e-commerce, social media). This makes it difficult for them to quickly and accurately identify trends, product issues, or general sentiment.
"""

# =========================================================
# SEL TUNGGAL UNTUK PROYEK INSIGHTIFY AI DI GOOGLE COLAB
# Pastikan Anda me-restart runtime sebelum menjalankan sel ini jika ada peringatan.
# =========================================================

# --- 1. Mount Google Drive & Instalasi Pustaka ---
print("Langkah 1: Mempersiapkan lingkungan...")
from google.colab import drive
drive.mount('/content/drive')

# Instalasi pustaka yang diperlukan (akan menunjukkan 'Requirement already satisfied' jika sudah terinstal)
# Menggunakan versi PyTorch untuk CUDA 12.1, yang umum di Colab. Sesuaikan jika Colab Anda menggunakan CUDA lain.
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
!pip install transformers
!pip install pandas matplotlib seaborn

# Mengimpor pustaka setelah instalasi
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from transformers import pipeline
from collections import Counter
import os
from IPython.display import display, Markdown

# Konfigurasi gaya plot
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 12

print("Langkah 1 Selesai: Lingkungan siap.")

# --- 2. Inisialisasi Model NLP & Definisi Fungsi Analisis ---
print("\nLangkah 2: Memuat model NLP dan mendefinisikan fungsi analisis...")

# Inisialisasi Model NLP
def load_sentiment_model():
    """Memuat model analisis sentimen dari Hugging Face."""
    try:
        model_name = "w11wo/indonesian-roberta-base-sentiment-classifier"
        classifier = pipeline("sentiment-analysis", model=model_name)
        print(f"Model NLP '{model_name}' berhasil dimuat!")
        return classifier
    except Exception as e:
        print(f"ERROR: Gagal memuat model NLP: {e}. Pastikan Anda memiliki koneksi internet.")
        return None

sentiment_classifier = load_sentiment_model()

# Fungsi untuk Analisis Sentimen
def analyze_sentiment(text):
    """Menganalisis sentimen dari teks menggunakan model yang dimuat."""
    if sentiment_classifier:
        try:
            result = sentiment_classifier(text)[0]
            return result['label']
        except Exception as e:
            # print(f"DEBUG: Gagal menganalisis sentimen untuk teks '{text[:50]}...': {e}")
            return "Error_Sentiment"
    return "Model_Not_Loaded"

# Fungsi Sederhana untuk Ekstraksi Kata Kunci
def extract_keywords_simple(text):
    """Ekstraksi kata kunci sederhana dari teks."""
    if not isinstance(text, str):
        return []

    clean_text = text.lower()
    for char in ',.!?;:()[]{}':
        clean_text = clean_text.replace(char, '')

    words = clean_text.split()

    stop_words_id = set([
        'yang', 'dan', 'ini', 'itu', 'di', 'dari', 'untuk', 'dengan', 'ada',
        'tidak', 'bukan', 'akan', 'sudah', 'telah', 'saat', 'para', 'juga',
        'masih', 'bisa', 'dapat', 'harus', 'kalau', 'atau', 'saja', 'pun',
        'ke', 'pada', 'dalam', 'sebagai', 'bersama', 'nya', 'lebih', 'kurang',
        'baik', 'buruk', 'sangat', 'sekali', 'membuat', 'terlalu', 'jadi',
        'lalu', 'kemudian', 'sama', 'setelah', 'sebelum', 'mereka', 'serta',
        'bagi', 'antara', 'oleh', 'hingga', 'demi', 'semua', 'macam', 'jenis',
        'tiap', 'setiap', 'banyak', 'sedikit', 'sering', 'jarang', 'selalu',
        'hanya', 'cuma', 'karena', 'sebab', 'maka', 'yaitu', 'yakni', 'adalah',
        'merupakan', 'akan', 'perlu', 'wajib', 'boleh', 'dapat', 'bisa', 'mungkin',
        'pernah', 'belum', 'sudah', 'telah', 'sedang', 'akan', 'produk', 'crocs', 'sepatu' # Tambahan untuk Crocs fiktif
    ])

    filtered_words = [word for word in words if len(word) > 2 and word not in stop_words_id]
    return filtered_words

print("Langkah 2 Selesai: Fungsi analisis didefinisikan.")

# --- 3. Pemuatan Data dan Analisis Utama ---
print("\nLangkah 3: Memuat data dan melakukan analisis...")

# Ubah path ini agar sesuai dengan lokasi file Anda di Google Drive
# Asumsi: file Anda ada di "/content/drive/MyDrive/drive/Topic_Label_Coffeeshop.csv"
file_path_in_drive = '/content/drive/MyDrive/drive/Topic_Label_Coffeeshop.csv'

# Verifikasi keberadaan file
if sentiment_classifier is None:
    Markdown("## Error Kritis: Model NLP Gagal Dimuat")
    Markdown("Tidak dapat melanjutkan analisis karena model NLP tidak berhasil dimuat.")
    Markdown("Pastikan Anda memiliki koneksi internet yang stabil dan coba jalankan kembali sel ini.")
else:
    if not os.path.exists(file_path_in_drive):
        print(f"ERROR: File '{file_path_in_drive}' tidak ditemukan.")
        print("Pastikan:")
        print("1. Anda sudah berhasil me-mount Google Drive.")
        print("2. File 'Topic_Label_Coffeeshop.csv' benar-benar ada di folder 'Drive' di Google Drive Anda.")
        print("3. Nama file dan folder sudah benar dan case-sensitive.")
    else:
        df_reviews = pd.read_csv(file_path_in_drive)

        # Kolom Ulasan (sudah disesuaikan berdasarkan feedback Anda)
        review_column_name = 'Teks Ulasan'

        if review_column_name not in df_reviews.columns:
            print(f"ERROR: File CSV harus memiliki kolom bernama '{review_column_name}' yang berisi teks ulasan.")
            print(f"Kolom yang ditemukan di file Anda: {', '.join(df_reviews.columns)}")
        else:
            print(f"File '{file_path_in_drive}' berhasil dimuat. Memulai analisis...")

            # Bersihkan ulasan yang kosong atau bukan string
            df_reviews = df_reviews.dropna(subset=[review_column_name])
            df_reviews[review_column_name] = df_reviews[review_column_name].astype(str)

            print("Menganalisis sentimen ulasan... Ini mungkin butuh waktu beberapa detik.")
            df_reviews['sentiment'] = df_reviews[review_column_name].apply(analyze_sentiment)

            # Hapus ulasan yang gagal dianalisis sentimen
            df_reviews_cleaned = df_reviews[
                (df_reviews['sentiment'] != "Error_Sentiment") &
                (df_reviews['sentiment'] != "Model_Not_Loaded")
            ].copy()

            print(f"Ditemukan {len(df_reviews_cleaned)} ulasan yang berhasil dianalisis.")

            # Ekstraksi & Penghitungan Kata Kunci
            all_keywords = []
            for review_text in df_reviews_cleaned[review_column_name]:
                all_keywords.extend(extract_keywords_simple(review_text))

            keyword_counts = Counter(all_keywords)
            top_keywords_df = pd.DataFrame(keyword_counts.most_common(15), columns=['Kata Kunci', 'Jumlah'])

            print("\nAnalisis Selesai!")
            print("Langkah 3 Selesai: Data berhasil dianalisis.")

            # --- 4. Visualisasi Hasil (Distribusi Sentimen) ---
            Markdown("## Ringkasan Analisis")
            Markdown("### Distribusi Sentimen Ulasan")

            if not df_reviews_cleaned.empty and 'sentiment' in df_reviews_cleaned.columns:
                sentiment_counts = df_reviews_cleaned['sentiment'].value_counts(normalize=True) * 100

                colors = {'positive': '#66bb6a', 'negative': '#ef5350', 'neutral': '#ffee58'}

                ordered_labels = ['positive', 'neutral', 'negative']
                sentiment_labels_present = [label for label in ordered_labels if label in sentiment_counts.index]
                sentiment_values_present = [sentiment_counts[label] for label in sentiment_labels_present]
                sentiment_colors_present = [colors[label] for label in sentiment_labels_present]

                if sentiment_labels_present:
                    fig_sentiment, ax_sentiment = plt.subplots(figsize=(7, 7))
                    ax_sentiment.pie(
                        sentiment_values_present,
                        labels=[f'{l} ({v:.1f}%)' for l, v in zip(sentiment_labels_present, sentiment_values_present)],
                        autopct='',
                        startangle=90,
                        colors=sentiment_colors_present,
                        textprops={'fontsize': 12}
                    )
                    ax_sentiment.axis('equal')
                    plt.title("Distribusi Sentimen Teks Ulasan", fontsize=16)
                    plt.show()
                else:
                    Markdown("Tidak ada data sentimen yang valid untuk ditampilkan.")
            else:
                Markdown("Tidak ada data ulasan yang berhasil dianalisis sentimen untuk visualisasi.")

            # --- 5. Visualisasi Hasil (Kata Kunci Teratas) ---
            Markdown("### Kata Kunci Paling Sering Disebut")

            if not top_keywords_df.empty:
                fig_keywords, ax_keywords = plt.subplots(figsize=(10, 7))
                sns.barplot(x='Jumlah', y='Kata Kunci', data=top_keywords_df, ax=ax_keywords, palette='viridis')
                ax_keywords.set_title("15 Kata Kunci Teratas", fontsize=16)
                ax_keywords.set_xlabel("Jumlah Kemunculan", fontsize=14)
                ax_keywords.set_ylabel("", fontsize=14)
                plt.tight_layout()
                plt.show()
            else:
                Markdown("Tidak ada kata kunci yang terdeteksi. Pastikan ulasan memiliki konten yang cukup.")

            # --- 6. Tampilan Detail Ulasan ---
            Markdown("## Detail Ulasan & Sentimen")

            if not df_reviews_cleaned.empty:
                display(df_reviews_cleaned[[review_column_name, 'sentiment']])
            else:
                Markdown("Tidak ada ulasan yang berhasil diproses untuk ditampilkan.")

            Markdown("---")
            Markdown("💡 **Tips:** Untuk hasil analisis yang lebih mendalam, pastikan ulasan Anda bervariasi dan relevan dengan produk/layanan yang dianalisis. Pengembangan lebih lanjut bisa mencakup visualisasi sentimen per kata kunci atau filter interaktif.")